---
title: "Hello, Penguins"
author: "Lukman Aliyu"
format: 
  html: default
  pdf: default
execute: 
  echo: true
editor: visual
bibliography: references.bib
---

# Introduction

I have been learning data science as a fellow of the Arewa Data Science Academy since January, 2023 and I have picked many skills. This is an attempt to practice quarto using the R programming language, in the RStudio IDE. I will work on the palmerpenguins dataset. Work in progress!

## Data {.smaller}

For this analysis, we 'll use the penguins dataset from the palmerpenguins package. [@gorman2014]

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(tidymodels)
library(ggthemes)
library(palmerpenguins)
library(gt)
```

Converting the dataset to a tibble for a more aesthetic display

```{r}
penguins <- as_tibble(penguins)
```

```{r}
glimpse(penguins)
```

Getting summary statistics of the dataset using the summary function in base R

```{r}
penguins %>% summary()
```

Exploring a bit more to see the initial few rows

```{r}
penguins %>% 

  head()  
```

## Meet Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Meet the penguins

![](https://raw.githubusercontent.com/quarto-dev/quarto-web/main/docs/get-started/hello/rstudio/lter_penguins.png){style="float:right;" fig-alt="Illustration of three species of Palmer Archipelago penguins: Chinstrap, Gentoo, and Adelie. Artwork by @allison_horst." width="401"}

The `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins "palmerpenguins R package") package contains size measurements for `r nrow(penguins)` penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.

The plot below shows the relationship between flipper and bill lengths of these penguins.

```{r}
#| label: plot-penguins
#| warning: false
#| echo: false

ggplot(penguins, 
       aes(x = flipper_length_mm, y = bill_length_mm)) +
  geom_point(aes(color = species, shape = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(
    title = "Flipper and bill length",
    subtitle = "Dimensions for penguins at Palmer Station LTER",
    x = "Flipper length (mm)", y = "Bill length (mm)",
    color = "Penguin species", shape = "Penguin species"
  ) +
  theme_minimal()
```

## Species

@fig-bill-dim-species is a scatter plot of species of penguins

```{r}
#| label: fig-bill-dim-species
#| fig-width: 5
#| fig-asp: 0.618
#| fig-alt: |
#|   A scatterplot of penguin's bill depth and length, colored by species of penguins. There is a relatively strong linear association. 
#| fig-cap: |
#|  A scatterplot of penguin's bill depth and length, colored by species of penguins.
#|  output-location: slide

ggplot(penguins,
       aes(x=bill_length_mm, y= bill_depth_mm,color=species,shape=species)) + geom_point() + theme_minimal() + scale_color_colorblind()  + labs( x = "Bill length (mm)", y = "Bill depth (mm)")

```

## Penguins

@tbl-penguins-top10 shows the first ten penguins from the dataset.

```{r}
#| label: tbl-penguins-top10
#| tbl-cap: First 10 penguins.

penguins %>%
  slice_head(n=10) %>%
  select(species,island,bill_length_mm,bill_depth_mm) %>%
  gt()

```

# Analysis

Check for missing values

```{r}
missing_values <- penguins %>% 

  summarise(across(everything(), ~sum(is.na(.))))  # Calculate missing values for each variable
cat("Missing values:\n")

print(missing_values)



```

## Data Pre-processing

First we need to remove rows with missing values to enable easy and accurate modelling

```{r}
# Remove rows with missing values
penguins <- penguins %>% 
  drop_na()
```

## Modelling

We begin by splitting the data into training and testing sets

```{r}
# Split the data into training and testing sets

set.seed(123)  # For reproducibility

split <- initial_split(penguins, prop = 0.7)

train_data <- training(split)

test_data <- testing(split)


```

Then we build a simple linear regression model using tidymodels package

```{r}
# Build a simple model using tidymodels

model <- linear_reg() %>%

  set_engine("lm") %>%

  set_mode("regression")

model_fit <- model %>% 

  fit(body_mass_g ~ bill_length_mm + bill_depth_mm, data = train_data)


```

Then, we evaluate the model, testing it on the test data

```{r}
# Model evaluation

train_predictions <- predict(model_fit, train_data) %>% 

  bind_cols(train_data)

test_predictions <- predict(model_fit, test_data) %>% 

  bind_cols(test_data)


```

We then calculate the evaluation for and testing data

```{r}
# Calculate evaluation metrics for training data
train_metrics <- train_predictions %>%
  summarize(
    rmse = sqrt(mean((body_mass_g - .pred)^2)),
    r_squared = cor(body_mass_g, .pred)^2
  )

cat("Training metrics:\n")
print(train_metrics)

# Calculate evaluation metrics for testing data
test_metrics <- test_predictions %>%
  summarize(
    rmse = sqrt(mean((body_mass_g - .pred)^2)),
    r_squared = cor(body_mass_g, .pred)^2
  )

cat("Testing metrics:\n")
print(test_metrics)
```

## Modelling Results

Here, I will show the plots for both the training and testing data

```{r}
# Calculate residuals for training data
train_residuals <- train_predictions %>%
  mutate(residual = body_mass_g - .pred)

# Create a scatter plot for training data residuals
ggplot(train_residuals, aes(x = body_mass_g, y = residual)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(x = "Actual", y = "Residual", title = "Training Data Residuals")


```

For the testing data

```{# Calculate residuals for testing data}
test_residuals <- test_predictions %>%
  mutate(residual = body_mass_g - .pred)

# Create a scatter plot for testing data residuals
ggplot(test_residuals, aes(x = body_mass_g, y = residual)) +
  geom_point() + geom_hline(yintercept = 0, linetype = "dashed", color = "red") + labs(x = "Actual", y = "Residual", title = "Testing Data Residuals")
```

Work in progress.

# References
